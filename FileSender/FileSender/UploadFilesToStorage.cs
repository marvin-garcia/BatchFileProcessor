using System;
using System.IO;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Azure.Storage.Blobs;
using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;

namespace FileSender
{
    public static class UploadFileToStorage
    {
        private static int _threshold = Convert.ToInt32(Environment.GetEnvironmentVariable("SendFileProbability"));
        private static string _connectionString = Environment.GetEnvironmentVariable("AzureWebJobsStorage");
        private static string _containerName = Environment.GetEnvironmentVariable("ContainerName");

        [FunctionName("UploadFileToStorage")]
        public static async Task Run(
            [TimerTrigger("*/30 * * * * *")] TimerInfo myTimer,
            ILogger log)
        {
            try
            {
                log.LogInformation($"UploadFileToStorage function executed at: {DateTime.Now}");
                Random random = new Random();
                int num = random.Next(100);

                if (num <= _threshold)
                {
                    BatchFile batchFile = new BatchFile()
                    {
                        Timestamp = DateTime.UtcNow,
                        Message = "Autogenerated message through UploadFileToStorage function",
                        Threshold = _threshold,
                        Value = num,
                    };

                    // Create a local file in a temp directory for uploading
                    string localPath = Path.GetTempPath();
                    string fileName = $"{DateTime.UtcNow.ToString("yyMMddHHmmss")}-{Guid.NewGuid().ToString()}.json";
                    string localFilePath = Path.Combine(localPath, fileName);

                    // Write text to the file
                    await File.WriteAllTextAsync(localFilePath, JsonConvert.SerializeObject(batchFile));

                    // Create a BlobServiceClient object which will be used to create a container client
                    BlobServiceClient blobServiceClient = new BlobServiceClient(_connectionString);

                    // Create container client object
                    BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(_containerName);

                    // Get a reference to a blob
                    BlobClient blobClient = containerClient.GetBlobClient(fileName);

                    log.LogInformation("Uploading to Blob storage as blob:\n\t {0}\n", blobClient.Uri);

                    // Open the file and upload its data
                    using FileStream uploadFileStream = File.OpenRead(localFilePath);
                    await blobClient.UploadAsync(uploadFileStream, true);
                    uploadFileStream.Close();
                }
            }
            catch (Exception e)
            {
                log.LogError($"UploadFileToStorage failed with the exception {e}");
                throw e;
            }
        }
    }
}